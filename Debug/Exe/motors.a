;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/30/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <set_dutycycle.h>
;#include <runsteper.h>
;#include <steper.h>
;
;// Declare your global variables here
;int side = 0;
;int time = 0;
;int dataStep = 0b10000000;
;int duty = 0;
;
;//// External Interrupt 0 service routine
;//interrupt [EXT_INT0] void ext_int0_isr(void)
;//{
;//// Place your code here
;//
;//}
;
;//// External Interrupt 1 service routine
;//interrupt [EXT_INT1] void ext_int1_isr(void)
;//{
;//// Place your code here
;//
;//}
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 // Place your code here
; 0000 0039 
; 0000 003A }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 003E {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003F // Place your code here
; 0000 0040 
; 0000 0041 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0045 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0046 // Reinitialize Timer2 value
; 0000 0047 //TCNT2=0xB2;
; 0000 0048 // Place your code here
; 0000 0049 steper(0x16);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 004A runsteper();
;PCODE: $0000001C VOL: 0
; 0000 004B 
; 0000 004C }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// Timer2 output compare interrupt service routine
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 0050 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0051 // Place your code here
; 0000 0052 
; 0000 0053 
; 0000 0054 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void main(void)
; 0000 0057 {
;PCODE: $00000025 VOL: 0
; 0000 0058 
; 0000 0059 
; 0000 005A // Input/Output Ports initialization
; 0000 005B // Port A initialization
; 0000 005C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 005D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005E 
; 0000 005F // Port B initialization
; 0000 0060 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0061 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0062 
; 0000 0063 // Port C initialization
; 0000 0064 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0065 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0066 
; 0000 0067 // Port D initialization
; 0000 0068 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0069 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 0 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: 7.813 kHz
; 0000 006E // Mode: Phase correct PWM top=0xFF
; 0000 006F // OC0 output: Non-Inverted PWM
; 0000 0070 // Timer Period: 65.28 ms
; 0000 0071 // Output Pulse(s):
; 0000 0072 // OC0 Period: 65.28 ms Width: 6.656 ms
; 0000 0073 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0074 TCNT0=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0075 OCR0=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0076 
; 0000 0077 //// Timer/Counter 1 initialization
; 0000 0078 //// Clock source: System Clock
; 0000 0079 //// Clock value: Timer1 Stopped
; 0000 007A //// Mode: Normal top=0xFFFF
; 0000 007B //// OC1A output: Disconnected
; 0000 007C //// OC1B output: Disconnected
; 0000 007D //// Noise Canceler: Off
; 0000 007E //// Input Capture on Falling Edge
; 0000 007F //// Timer1 Overflow Interrupt: Off
; 0000 0080 //// Input Capture Interrupt: Off
; 0000 0081 //// Compare A Match Interrupt: Off
; 0000 0082 //// Compare B Match Interrupt: Off
; 0000 0083 //TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
; 0000 0084 //TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
; 0000 0085 //TCNT1H=0x00;
; 0000 0086 //TCNT1L=0x00;
; 0000 0087 //ICR1H=0x00;
; 0000 0088 //ICR1L=0x00;
; 0000 0089 //OCR1AH=0x00;
; 0000 008A //OCR1AL=0x00;
; 0000 008B //OCR1BH=0x00;
; 0000 008C //OCR1BL=0x00;
; 0000 008D 
; 0000 008E 
; 0000 008F 
; 0000 0090 
; 0000 0091 // Timer/Counter 2 initialization
; 0000 0092 // Clock source: System Clock
; 0000 0093 // Clock value: 7.813 kHz
; 0000 0094 // Mode: Normal top=0xFF
; 0000 0095 // OC2 output: Set on compare match
; 0000 0096 // Timer Period: 9.984 ms
; 0000 0097 // Output Pulse(s):
; 0000 0098 // OC2 Period: 9.984 ms
; 0000 0099 ASSR=0<<AS2;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 009A TCCR2=(0<<PWM2) | (1<<COM21) | (1<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 009B TCNT2=0x64;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 009C OCR2=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 009D 
; 0000 009E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009F TIMSK=(1<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00A0 
; 0000 00A1 
; 0000 00A2 
; 0000 00A3 //// External Interrupt(s) initialization
; 0000 00A4 //// INT0: On
; 0000 00A5 //// INT0 Mode: Falling Edge
; 0000 00A6 //// INT1: On
; 0000 00A7 //// INT1 Mode: Falling Edge
; 0000 00A8 //// INT2: Off
; 0000 00A9 //GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
; 0000 00AA //MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
; 0000 00AB //MCUCSR=(0<<ISC2);
; 0000 00AC //GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
; 0000 00AD //
; 0000 00AE 
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 // Alphanumeric LCD initialization
; 0000 00B2 // Connections are specified in the
; 0000 00B3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B4 // RS - PORTC Bit 0
; 0000 00B5 // RD - PORTC Bit 1
; 0000 00B6 // EN - PORTC Bit 2
; 0000 00B7 // D4 - PORTC Bit 4
; 0000 00B8 // D5 - PORTC Bit 5
; 0000 00B9 // D6 - PORTC Bit 6
; 0000 00BA // D7 - PORTC Bit 7
; 0000 00BB // Characters/line: 8
; 0000 00BC lcd_init(8);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00BD 
; 0000 00BE // Global enable interrupts
; 0000 00BF #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 00C0 
; 0000 00C1 
; 0000 00C2 while (1)
;PCODE: $0000004A VOL: 0
; 0000 00C3       {
; 0000 00C4       // Place your code here
; 0000 00C5        set_dutycycle();
;PCODE: $0000004B VOL: 0
; 0000 00C6       }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00C7 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
