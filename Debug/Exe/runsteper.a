;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;extern int side;
;extern int time;
;extern int dataStep;
;extern int duty;
;
;void runsteper (void){
; 0003 0009 void runsteper (void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 000A 
; 0003 000B 
; 0003 000C    PORTB = dataStep ;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 000D 
; 0003 000E 
; 0003 000F    time++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0003 0010    if(time == 300){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0011      delay_ms(2000);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0012      time = 0;
;PCODE: $00000019 VOL: 0
; 0003 0013      if(side == 0) side = 1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0003 0014      else side = 0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0003 0015    }
;PCODE: $00000021 VOL: 0
; 0003 0016 
; 0003 0017    if(side == 0 ){     // right
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0003 0018        dataStep = 0b10000000 >> duty;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 0019        PORTD.0 = 0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 001A        PORTD.1 = 1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 001B    }else if (side == 1){   // left
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 001C      dataStep = 1 << 4+duty;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 001D      PORTD.0 = 1;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0003 001E      PORTD.1 = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 001F    }
; 0003 0020 
; 0003 0021     duty = duty + 1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0022     if(duty == 4){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0003 0023           duty = 0;
;PCODE: $00000044 VOL: 0
; 0003 0024     }
; 0003 0025 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
